var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = RiskMeasures","category":"page"},{"location":"#RiskMeasures","page":"Home","title":"RiskMeasures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RiskMeasures.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RiskMeasures]","category":"page"},{"location":"#RiskMeasures.AVaR-Tuple{Vector{Float64}, Vector{Float64}, Float64}","page":"Home","title":"RiskMeasures.AVaR","text":"AVaR(states,prob,alpha::Float64)\n\nSolves the optimization problem associated with the primal formulation of the Average Value-at-Risk:\n\nAVaR_alpha(Y) = min_xin mathbbR x + frac11-alpha mathbbE left( Y - x right)_+\n\nwhere Y is the discrete random variable defined by states and prob.\n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.CTE-Tuple{Vector{Float64}, Vector{Float64}, Float64}","page":"Home","title":"RiskMeasures.CTE","text":"CTE(states,prob,alpha::Float64)\n\nimplements the Conditional Value-at-Risk at level alpha defined by\n\nCTE_alpha (Y) = VaR_alpha(Y) + frac11-alpha mathbbE left( Y- VaR_alpha (Y) right)_+ \n\nfor the random variable Y defined by states and prob.\n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.EVaR-Tuple{Vector{Float64}, Vector{Float64}, Float64}","page":"Home","title":"RiskMeasures.EVaR","text":"EVaR(states,prob,beta::Float64)\n\nSolves the optimization problem associated with the primal formulation of the Entropic Value-at-Risk:\n\nEVaR_alpha(Y) = min_x 0 frac1x left( beta +  logmathbbE e^xY right)\n\nwhere Y is the discrete random variable defined by states and prob. Here, the optimization is done using JuMP and Ipopt.  \n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.EVaR2-Tuple{Vector{Float64}, Vector{Float64}, Float64}","page":"Home","title":"RiskMeasures.EVaR2","text":"EVaR2(states,prob,beta)\n\nSolves the optimization problem associated with the primal formulation of the Entropic Value-at-Risk:\n\nEVaR_alpha(Y) = min_x 0 frac1x left( beta +  logmathbbE e^xY right)\n\nwhere Y is the discrete random variable defined by states and prob. Here the optimization is done via the goldenSearch optimization routine implemented as part of this package. \n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.Expectation-Tuple{Vector{Float64}, Vector{Float64}}","page":"Home","title":"RiskMeasures.Expectation","text":"Expectation(states,prob)\n\nComputes the expectation for the random variable Y with values given by states under the probability measure Q given by prob:\n\nmathbbE Y = states cdot prob\n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.GenCoherent-Tuple{Any, Any, Any}","page":"Home","title":"RiskMeasures.GenCoherent","text":"GenCoherent(states, prob,conds)\n\nimplements a generic coherent risk measure based on the dual representation\n\nrho(Y) = sup left( mathbbE YZ colon mathbbEZ=1 Zgeq 0 F(Z) leq c right)\n\nwhere F(cdot) is a positively homegeneous and convex function and c is a constant.     \n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.GenConvex-NTuple{4, Any}","page":"Home","title":"RiskMeasures.GenConvex","text":"GenConvex(states, prob, conds, conjugate)\n\nimplements a generic coherent risk measure based on the dual representation\n\nrho(Y) = sup left( mathbbE YZ - conjugate(Z) colon mathbbEZ=1 Zgeq 0 right)\n\nwhere conjugate(cdot) is a and convex function and conds describes the domain of conjugate(cdot).     \n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.VaR-Tuple{Vector{Float64}, Vector{Float64}, Float64}","page":"Home","title":"RiskMeasures.VaR","text":"VaR(states,prob,alpha::Float64)\n\nimplements the Value-at-Risk at level alpha defined by\n\nVaR_alpha (Y) = arg min_x left( xin mathbbR  F_Y(x) geq alpha right)\n\nfor the random variable Y defined by states and prob.\n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.distortion-Tuple{Any, Any, Any}","page":"Home","title":"RiskMeasures.distortion","text":"distortion(states, prob,dist)\n\nimplements the distortion risk measure    \n\nrho(Y) = int_0^infty 1- dist(F_Y(x)) dx - int_-infty^0 dist(F_Y(x) dx\n\nwhere Y is the discrete random variable defined by states and prob and dist(cdot) denotes the distortion function which is a right-continuous distribution function.\n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.entropic-Tuple{Vector{Float64}, Vector{Float64}, Float64}","page":"Home","title":"RiskMeasures.entropic","text":"entropic(states, prob,theta::Float64)\n\nimplements the entropic risk measure defined as\n\nrho_theta(Y) = theta cdot log mathbbE e^fracYtheta\n\nwhere theta is greater 0 and Y is the random variable defined by states and prob.\n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.mSD-Tuple{Vector{Float64}, Vector{Float64}, Float64, Float64}","page":"Home","title":"RiskMeasures.mSD","text":"mSD(states,prob,beta::Float64,p::Float64)\n\nimplements the mean semi-deviation of order p which is a coherent risk measure defined by\n\nmSD_beta^p (Y) = mathbbE Y  + beta lvert left( Y - mathbbEY right)_+ rvert_p\n\nfor the random variable Y defined by states and prob.\n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.meanSemiDevi-Tuple{Vector{Float64}, Vector{Float64}, Float64, Float64, Float64}","page":"Home","title":"RiskMeasures.meanSemiDevi","text":"meanSemiDevi(states, prob,c::Float64,target::Float64,p::Float64)\n\nimplements the mean upper-semi variance risk measure of order p geq 1 from a target t defined by\n\nrho_ct^p(Y) = mathbbEY + c cdot lVert left( Y - t right)_+ rVert_p \n\nwhere c 0 and Y is the random variable defined by states and prob.\n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.meanSemiVariance-Tuple{Vector{Float64}, Vector{Float64}, Float64, Float64}","page":"Home","title":"RiskMeasures.meanSemiVariance","text":"meanSemiVariance(states, prob,c::Float64,t::Float64)\n\nimplements the mean upper-semi variance risk measure from a target t defined by\n\nrho_ct(Y) = mathbbEY + c cdot mathbbE left( Y - t right)^2_+ \n\nwhere c 0 and Y is the random variable defined by states and prob.\n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.meanVariance-Tuple{Vector{Float64}, Vector{Float64}, Float64}","page":"Home","title":"RiskMeasures.meanVariance","text":"meanVariance(states, prob,c::Float64)\n\nimplements the mean Variance risk measure defined by\n\nrho_c(Y) = mathbbEY + c cdot mathbbE left( Y- mathbbEY)^2 right)\n\nwhere c 0 and Y is the random variable defined by states and prob.\n\n\n\n\n\n","category":"method"},{"location":"#RiskMeasures.spectral-Tuple{Any, Any, Any}","page":"Home","title":"RiskMeasures.spectral","text":"spectral(states, prob, spec)\n\nimplements the spectral risk measure    \n\nrho(Y) = int_0^1 spec(x) cdot F_Y^-1(alpha) dalpha\n\nwhere Y is the discrete random variable defined by states and prob and spec(cdot) denotes the spectral function which is\n\nincreasing\nintegrates to 1.\n\n\n\n\n\n","category":"method"}]
}
